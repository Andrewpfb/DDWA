const AjaxHelper = (function() {
    let url, bookArray;

    function initAjax(initUrl) {
        url = initUrl;
        bookArray = [];
    }

    async function getBooks(callback) {
        const options = {
            method: 'get'
        };
        try {
            const response = await fetch(url, options);
            const bookArrayResponse = await response.json();
            bookArray = bookArrayResponse;
            callback(bookArray);
        } catch (err) {
            console.log(err);
        }
    };

    function searchBooks(searchWord, callback = TableBuilder.CreateTable) {
        callback(bookArray.filter(
            s =>
            s.Name == searchWord ||
            s.Genre == searchWord ||
            s.Author == searchWord));
    }

    async function deleteBookById(id) {
        if (confirm('Are you sure?')) {
            const options = {
                method: 'delete'
            };
            const path = url + `?id=${id}`;
            try {
                const response = await fetch(path, options);
                console.log(`Delete's status: ${response.status} ${response.statusText}`);
                PageFunction.DrawTable();
            } catch (err) {
                console.log(err);
            }
        }
    }

    function getInfoById(id) {
        return bookArray.find(x => x.id == id);
    }

    async function updateBook(book) {
        const options = {
            method: 'put',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify(book)
        }
        const path = url + '/' + book.id;
        try {
            const response = await fetch(path, options);
            console.log(`Update's status: ${response.status} ${response.statusText}`);
            PageFunction.DrawTable();
        } catch (err) {
            console.log(err);
        }
    }

    async function createBook(book) {
        const options = {
            method: 'post',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify(book)
        }
        try {
            const response = await fetch(url, options);
            console.log(`Create's status: ${response.status} ${response.statusText}`);
            PageFunction.DrawTable();
        } catch (err) {
            console.log(err);
        }
    }

    return {
        InitAjax: function(url) {
            initAjax(url);
        },
        GetBooks: function(callback) {
            getBooks(callback);
        },
        DeleteBookById: function(id) {
            deleteBookById(id);
        },
        GetBookInfoById: function(id) {
            return getInfoById(id);
        },
        UpdateBook: function(book) {
            updateBook(book);
        },
        CreateBook: function(book) {
            createBook(book);
        },
        SearchBooks: function(searchWord, callback) {
            searchBooks(searchWord, callback);
        }
    }
})();
"use strict";

const GLOBAL_CONST = (function() {
    const url = 'http://localhost:2403/books';
    const audioType = 1;
    const schoolType = 2;
    return {
        URL: url,
        AUDIO_TYPE: audioType,
        SCHOOL_TYPE: schoolType
    }
})();
"use strict";

function Info(id) {
    PageFunction.GetInfo(id);
}

function Delete(id) {
    PageFunction.DeleteBook(id);
}

function Edit(id) {
    PageFunction.EditBook(id);
}

function ShowCreateForm() {
    PageFunction.ShowCreateForm();
}

function Save() {
    PageFunction.SaveBook();
}

function ChangeCreateBookType() {
    PageFunction.ChangeBookTypeByForm();
}

function Search() {
    PageFunction.Search();
}

function LoadData() {
    PageFunction.InitPage();
};

if (!!window.Worker) {
    let worker = new Worker('./js/worker.js');
    let delay = new Date() - new Date(localStorage.getItem('lastUpdate'));
    if (delay < 60000) {
        worker.postMessage(60000 - delay);
    } else {
        worker.postMessage(0);
    };
    worker.onmessage = function(e) {
        document.getElementById('count').value = e.data;
        localStorage.setItem('lastUpdate', new Date());
    };
}
"use strict";

const Models = (function() {
    class Book {
        constructor(initArray) {
            let { id, Name, Genre, Author, IsHasCD, IsHasDVD, PublishingHouse, Type } = initArray;
            this.id = id;
            this.name = Name;
            this.genre = Genre;
            this.author = Author;
            this.isHasCD = IsHasCD;
            this.isHasDVD = IsHasDVD;
            this.publishingHouse = PublishingHouse;
            this.type = Type;
        }

        [Symbol.iterator]() {
            let _this = this;
            let keys = null;
            let index = 0;

            return {
                next: function() {
                    if (keys === null) {
                        keys = Object.keys(_this).sort();
                    }

                    return {
                        value: keys[index],
                        done: index++ >= keys.length
                    };
                }
            }
        }

        get Id() {
            return this.id;
        };

        get Type() {
            return this.type;
        };
        // name get/set.
        get Name() {
            return this.name;
        };
        set Name(name) {
            if (typeof(name) == "string") {
                this.name = name;
            } else {
                throw `Variable isn't a string`;
            }
        };
        // genre get/set.
        get Genre() {
            return this.genre;
        };
        set Genre(genre) {
            if (typeof(genre) == "string") {
                this.genre = genre;
            } else {
                throw `Variable isn't a string`;
            }
        };
        // author get/set.
        get Author() {
            return this.author;
        };
        set Author(author) {
            if (typeof(author) == "string") {
                this.author = author;
            } else {
                throw `Variable isn't a string`;
            }
        };
        // isHasCd get/set.
        get IsHasCD() {
            return this.isHasCD;
        };
        set IsHasCD(isHas) {
            if (typeof(isHas) == "boolean") {
                this.isHasCD = isHas;
            } else {
                if (isHas == 1) this.isHasCD = true;
                if (isHas == 0) this.isHasCD = false;
                throw `Variable isn't a boolean`;
            }
        };
        // isHasDVD get/set.
        get IsHasDVD() {
            return this.isHasDVD;
        };
        set IsHasDVD(isHas) {
            if (typeof(isHas) == "boolean") {
                this.isHasDVD = isHas;
            } else {
                if (isHas == 1) this.isHasDVD = true;
                if (isHas == 0) this.isHasDVD = false;
                throw `Variable isn't a boolean`;
            }
        };
        // publishingHouse get/set.
        get PublishingHouse() {
            return this.publishingHouse;
        }
        set PublishingHouse(publishingHouse) {
            if (typeof(publishingHouse) == "string") {
                this.publishingHouse = publishingHouse;
            } else {
                throw `Variable isn't a string`;
            }
        };

        GetInfo() {
            return `
            Name: ${this.Name} 
            Genre: ${this.Genre}
            Author: ${this.Author} 
            CD: ${this.IsHasCD} 
            DVD: ${this.IsHasDVD} 
            Publishing house: ${this.PublishingHouse}`;
        }
    }

    class AudioBook extends Book {
        constructor(initArray) {
            super(initArray);
            this.duration = initArray.Duration;
            this.size = initArray.Size;
        };

        // duration get/set
        get Duration() {
            return this.duration;
        };
        set Duration(duration) {
            if (typeof(duration) == "number") {
                this.duration = duration;
            } else {
                throw `Variable isn't a number`;
            }
        };
        // size get/set
        get Size() {
            return this.size;
        };
        set Size(size) {
            if (typeof(size) == "number") {
                _size = size;
            } else {
                throw `Variable isn't a number`;
            }
        };

        GetInfo() {
            return `
            ${super.GetInfo()} 
            Duration: ${this.Duration} 
            Size: ${this.Size}`;
        }
    };

    class SchoolBook extends Book {
        constructor(initArray) {
            super(initArray);
            this.pageCount = initArray.PageCount;
            this.coverType = initArray.CoverType;
        };

        // pageCount get/set.
        get PageCount() {
            return this.pageCount;
        };
        set PageCount(pageCount) {
            if (typeof(pageCount) == "number") {
                this.pageCount = pageCount;
            } else {
                throw `Variable isn't a number`;
            }
        };
        // coverType get/set.
        get CoverType() {
            return this.coverType;
        }
        set CoverType(coverType) {
            if (typeof(publishingHouse) == "string") {
                this.coverType = coverType;
            } else {
                throw `Variable isn't a string`;
            }
        }
        GetInfo() {
            return `
            ${super.GetInfo()}
            Page count: ${this.PageCount} 
            Cover type: ${this.CoverType}`;
        }
    };
    return {
        CreateAudioBook: function(book) {
            return new AudioBook(book);
        },
        CreateSchoolBook: function(book) {
            return new SchoolBook(book);
        },
        GetInfoByBook: function(book) {
            return book.GetInfo();
        },
        ProxyExample: function(book) {
            return new Proxy(book, {
                get(target, prop) {
                    console.log(`Read ${prop}`);
                    return target[prop];
                }
            })
        }
    }
})();
"use strict";

const PageFunction = (function() {
    let isEdit = false;
    let select;

    function initPage() {
        AjaxHelper.InitAjax(GLOBAL_CONST.URL);
        TableBuilder.InitTableBuilder('tableForm');
        document.getElementById('bookForm').onsubmit = function(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            saveBook();
        }
        select = document.getElementById('selectTypeBook');
        drawTable();
    };

    function drawTable() {
        const callback = TableBuilder.CreateTable;
        AjaxHelper.GetBooks(callback);
    }

    function getInfo(id) {
        const book = AjaxHelper.GetBookInfoById(id);
        if (book) {
            if (book.Type == GLOBAL_CONST.AUDIO_TYPE) {
                TableBuilder.CreateDetailTable(Models.CreateAudioBook(book));
            } else if (book.Type == GLOBAL_CONST.SCHOOL_TYPE) {
                TableBuilder.CreateDetailTable(Models.CreateSchoolBook(book));
            }
        } else {
            console.log(`Book doesn't find`);
        }
    };

    function deleteBook(id) {
        AjaxHelper.DeleteBookById(id);
    };

    function editBook(id) {
        const book = AjaxHelper.GetBookInfoById(id);
        if (book) {
            isEdit = true;
            setSelectValue(book.Type);
            document.getElementById('bookId').value = book.id;
            document.getElementById('bookName').value = book.Name;
            document.getElementById('bookAuthor').value = book.Author;
            document.getElementById('bookGenre').value = book.Genre;
            document.getElementById('bookCD').checked = book.IsHasCD;
            document.getElementById('bookDVD').checked = book.IsHasDVD;
            document.getElementById('bookPublHouse').value = book.PublishingHouse;
            document.getElementById('bookDuration').value = book.Duration;
            document.getElementById('bookSize').value = book.Size;
            document.getElementById('bookPageCount').value = book.PageCount;
            document.getElementById('bookCoverType').value = book.CoverType;
            showCreateForm();
        } else {
            console.log(`Error, book doesn't found`);
        }
    };

    function saveBook() {
        let book = {
            Type: getSelectedType(),
            Name: document.getElementById('bookName').value,
            Author: document.getElementById('bookAuthor').value,
            Genre: document.getElementById('bookGenre').value,
            IsHasCD: document.getElementById('bookCD').checked,
            IsHasDVD: document.getElementById('bookDVD').checked,
            PublishingHouse: document.getElementById('bookPublHouse').value,
            Duration: document.getElementById('bookDuration').value,
            Size: document.getElementById('bookSize').value,
            PageCount: document.getElementById('bookPageCount').value,
            CoverType: document.getElementById('bookCoverType').value,
        };
        if (isEdit == true) {
            isEdit = false;
            book.id = document.getElementById('bookId').value;
            AjaxHelper.UpdateBook(book);
        } else {
            AjaxHelper.CreateBook(book);
        }
        document.getElementById('bookForm').style.display = "none";
        document.getElementById('createBookFormBtn').style.display = 'block';
    };

    function changeBookTypeByForm() {
        if (getSelectedType() == GLOBAL_CONST.AUDIO_TYPE) {
            document.getElementById('forAudio').style.display = 'block';
            document.getElementById('forSchool').style.display = 'none';
        } else if (getSelectedType() == GLOBAL_CONST.SCHOOL_TYPE) {
            document.getElementById('forAudio').style.display = 'none';
            document.getElementById('forSchool').style.display = 'block';
        };
    };

    function showCreateForm() {
        document.getElementById('bookForm').style.display = 'block';
        document.getElementById('createBookFormBtn').style.display = 'none';
    };

    function getSelectedType() {
        const selectOption = select.options[select.selectedIndex];
        return selectOption.value;
    };

    function setSelectValue(value) {
        const selectOption = select.options[value - 1].selected = true;
        changeBookTypeByForm();
    };

    function search() {
        let searchWord = document.getElementById('searchField').value;
        AjaxHelper.SearchBooks(searchWord);
    }

    return {
        InitPage: function() {
            initPage();
        },
        GetInfo: function(id) {
            getInfo(id);
        },
        DeleteBook: function(id) {
            deleteBook(id);
        },
        EditBook: function(id) {
            editBook(id);
        },
        SaveBook: function() {
            saveBook();
        },
        ShowCreateForm: function() {
            showCreateForm();
        },
        ChangeBookTypeByForm: function() {
            changeBookTypeByForm();
        },
        Search: function() {
            search();
        },
        DrawTable() {
            drawTable();
        }
    }
})();
"use strict";

const TableBuilder = (function() {
    let divId;
    const bookTableObj = document.createElement('table');
    const detailTableObj = document.createElement('table');

    function initTableBuilder(containerId) {
        divId = containerId;
    }

    function buildBooksTable(array) {
        bookTableObj.setAttribute('border', '1');

        bookTableObj.setAttribute('id', 'BooksTable');

        let tableHTML = '<caption>Books</caption><thead><tr>';

        tableHTML += `
        <td> Name </td>
        <td> Author </td>
        <td> Genre </td>
        <td> IsHasCD </td>
        <td> IsHasDVD </td>
        <td> PublishingHouse </td>
        <td> Delete </td>
        <td> Info </td>
        <td> Edit </td>
        </tr></thead>`;
        for (let i = 0; i < array.length; i++) {
            tableHTML += `<tr>
                <td> ${array[i].Name}</td>
                <td> ${array[i].Author}</td>
                <td> ${array[i].Genre}</td>
                <td> ${array[i].IsHasCD}</td>
                <td> ${array[i].IsHasDVD}</td>
                <td> ${array[i].PublishingHouse}</td>
                <td><button onclick="Delete('${array[i].id}')">Delete</button></td>
                <td><button onclick="Info('${array[i].id}')">Info</button></td>
                <td><button onclick="Edit('${array[i].id}')">Edit</button></td>
                </tr>`;
        }
        bookTableObj.innerHTML = tableHTML;
        document.getElementById(divId).appendChild(bookTableObj);
    }

    function buildDetailTable(book) {
        let proxy = Models.ProxyExample(book);
        console.log(proxy.GetInfo());
        detailTableObj.setAttribute('border', '1');
        detailTableObj.setAttribute('id', 'DetailTable');
        let tableHTML = '<caption>Detail</caption>';
        for (let key in proxy) {
            if (key == 'id' || key == 'type') {} else {
                tableHTML += `<tr><td>${key}</td><td>${proxy[key]}</td></tr>`;
            }
        }
        detailTableObj.innerHTML = tableHTML;
        document.getElementById(divId).appendChild(detailTableObj);
    }

    return {
        InitTableBuilder: function(containerId) {
            initTableBuilder(containerId);
        },
        CreateTable: function(bookArray) {
            buildBooksTable(bookArray);
        },
        CreateDetailTable: function(book) {
            buildDetailTable(book);
        }
    }
})();